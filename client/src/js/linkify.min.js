!(function (e) {
	"object" == typeof exports && "object" == typeof module
		? (module.exports = e(require("./xterm.min.js")))
		: "function" == typeof define
		? define(["../../xterm"], e)
		: e(window.Terminal);
})(function (e) {
	"use strict";
	var n = {},
		i = new RegExp(
			"(?:^|[^\\da-z\\.-]+)((https?:\\/\\/)?((([\\da-z\\.-]+)\\.([a-z\\.]{2,6}))|((\\d{1,3}\\.){3}\\d{1,3}))(:\\d{1,5})?(\\/[\\/\\w\\.-]*)*)($|[^\\/\\w\\.-]+)"
		),
		t = new RegExp(
			"(?:^|[^\\da-z\\.-]+)((https?:\\/\\/)((([\\da-z\\.-]+)\\.([a-z\\.]{2,6}))|((\\d{1,3}\\.){3}\\d{1,3}))(:\\d{1,5})?(\\/[\\/\\w\\.-]*)*)($|[^\\/\\w\\.-]+)"
		);
	return (
		(n.linkifyTerminalLine = function (e, i, t, r) {
			if ("number" == typeof i) i = e.rowContainer.children[i];
			else if (!(i instanceof HTMLDivElement)) {
				throw (
					(" or an HTMLDivElement", new TypeError('The "line" argument should be either a number or an HTMLDivElement'))
				);
			}
			r = void 0 === r ? "" : 'target="' + r + '"';
			for (var a = document.createElement("span"), o = i.childNodes, l = 0; l < o.length; l++) {
				var f = o[l];
				a.textContent = f.data;
				var d = a.innerHTML;
				if (f.nodeType == f.TEXT_NODE) {
					var c = n.findLinkMatch(f.data, t);
					if (c) {
						var p = new RegExp("^(https?:\\/\\/)"),
							u = '<a href="' + (c.match(p) ? c : "http://" + c) + '" ' + r + ">" + c + "</a>",
							h = d.replace(c, u);
						i.innerHTML = i.innerHTML.replace(d, h);
					}
				}
			}
			e.emit("linkify:line", i);
		}),
		(n.findLinkMatch = function (e, n) {
			var r = e.match(n ? i : t);
			return r && 0 !== r.length ? r[1] : null;
		}),
		(n.linkify = function (e, i, t) {
			var r = e.rowContainer.children;
			i = "boolean" != typeof i || i;
			for (var a = 0; a < r.length; a++) {
				var o = r[a];
				n.linkifyTerminalLine(e, o, i, t);
			}
			e.emit("linkify");
		}),
		(e.prototype.linkifyTerminalLine = function (e, i, t) {
			return n.linkifyTerminalLine(this, e, i, t);
		}),
		(e.prototype.linkify = function (e, i) {
			return n.linkify(this, e, i);
		}),
		n
	);
});
